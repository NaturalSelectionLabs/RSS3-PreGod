name: RSS3-PreGod Docker Build

on:
  push:
    branches:
      - 'develop'
      - 'main'
    tags:
      - 'v*.*.*'


env:
  AWS_REGION: us-west-2
  IMAGE_NAME_HUB: rss3/pregod-hub
  IMAGE_NAME_INDEXER: rss3/pregod-indexer

jobs:
  build-hub:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - name: docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME_HUB }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: hub.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Publish status
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Build Hub"
          description: "Build RSS3-PreGod Hub"
          username: 'GitHub Actions'

  build-indexer:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - name: docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME_INDEXER }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: indexer.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Publish status
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Build Indexer"
          description: "Build RSS3-PreGod Indexer"
          username: 'GitHub Actions'

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-hub, build-indexer]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME_HUB }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Replace image field
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_HUB }}:${{ steps.meta.outputs.version }}"' ./deploy/dev/deploy-hub.yaml
            yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_INDEXER }}:${{ steps.meta.outputs.version }}"' ./deploy/dev/deploy-indexer.yaml
            yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_INDEXER }}:${{ steps.meta.outputs.version }}"' ./deploy/dev/deploy-indexer-autocrawler.yaml
            yq -i '.spec.jobTemplate.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_INDEXER }}:${{ steps.meta.outputs.version }}"' ./deploy/dev/cronjob-indexer.yaml
      - run: aws eks update-kubeconfig --region us-west-2 --name development
      - run: |
          kubectl apply -f deploy/dev
          kubectl -n pregod rollout restart deploy pregod-hub pregod-indexer pregod-indexer-autocrawler
          kubectl -n pregod rollout status deploy pregod-hub
          kubectl -n pregod rollout status deploy pregod-indexer

  deploy-prod:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME_HUB }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Replace image field
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_HUB }}:${{ steps.meta.outputs.version }}"' ./deploy/prod/deploy-hub.yaml
            yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_INDEXER }}:${{ steps.meta.outputs.version }}"' ./deploy/prod/deploy-indexer.yaml
            yq -i '.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_INDEXER }}:${{ steps.meta.outputs.version }}"' ./deploy/prod/deploy-indexer-autocrawler.yaml
            yq -i '.spec.jobTemplate.spec.template.spec.containers[0].image = "${{ env.IMAGE_NAME_INDEXER }}:${{ steps.meta.outputs.version }}"' ./deploy/prod/cronjob-indexer.yaml
      - run: aws eks update-kubeconfig --region us-west-2 --name production
      - run: |
          kubectl apply -f deploy/prod
          kubectl -n pregod rollout status deploy pregod-hub
          kubectl -n pregod rollout status deploy pregod-indexer
          kubectl -n pregod rollout status deploy pregod-indexer-autocrawler
